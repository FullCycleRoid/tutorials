# Docker

Технология контейнеризации. Docker позволяет сздавать легковестное окружения, легко поддерживать зависимости, настравить
среду разработки и использовать скрипты для автоматизации развертывания проекта и тестирования

Настроим контейнер для развертывания проекта онлайн клиники. Для того чтобы понять что нужно контейнеру необходимо
обратиться к требованиям проекта. Однака в данном уроке мы создадим базовый контейнер для развертывания простого проекта на Django.

В первую очередь создайте в корне проекта файл Dockerfile. Докер будет автоматически создавать контейнер считывая инструкции из данного файла.
Данный файл является набором текстовых команд, которые вы могли бы ввести из командной строки для сборки образа.
Использя docker-build юзер создает автоматизированный билд, который запускает команд-подобные инструкции.

Docker build создает образ из файла Dockerfile и контекста. Контекст - это набор файлов определенных в PATH и URL.
PATH - это директория на вашей локальной машине.  URL - это аддрес GIT репозитория.

Контекст обрабатывается рекурсивно. Так что PATH включает все поддериктории и URL включает репозиторий и сбмодули

Пример показывает команду сборки которая использует текущую директорию как контекст
docker build .

Сборка запускает Docker daemon. Первое что делает процесс сборки - это посылает данные контектса в демон, в большинстве случаев.
Лучше всего начать с пустой директории и держать Dockerfile в этой директории. Добавлять только файлы нужные для построения Dockerfile.
Чтобы использовать файл в build context Dcokerfile ссылается на файл определенный в инструкции.
Например, COPY инструкция. Чтобы повысить представление билда, исключите файдлы и директории добавив .dockerignore файл в директорию контекста.
в директорию контекста.

Традиуионно Dockerfile называется Dockerfile и распологается в корне контекста. Используйте -f флаг с командой docker build, чтобы
определить расположение файла Dockerfile где угодно в файловой системе

$ docker build -f /path/to/a/Dockerfile

Чтобы загрузить образ в несколько репозиториев после сборки, добавьте -t параметр
$ docker build -t shykes/myapp:1.0.2 -t shykes/myapp:latest

До того как докер демон запустит иснтрукции из Dockerfile это запускает предварительную проверку и возвращает ошибку, если синтаксис неверен.
Докер демон запускает интсрукции из Dockerfile одну за другой, фиксируя результат каждой иснтрукции в новом образе, если необходимо, до
финальной выдачи ID вашего нового образа. Докер демон автоматически очистит контекст, которыйы вы посылали.

Заметьте, что каждая инструкция запускается незаисимо и потому новый образ не будет иметь нежелательных эффектов с каждой следующей инструкцией.
Тем не менее возможно, что докер будет переиспользовать предыдущую сборку (кэш), чтобы значительно ускорить процесс сборки.

Инструкция FROM определяет родительский образ из которого собирается билд.
From python:3.7-alpine
